{"version":3,"file":"geocoding.umd.min.js","sources":["../../src/helpers.ts","../../src/bulk.ts","../../src/geocode.ts","../../src/reverse.ts","../../src/suggest.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\n// https always\nexport const ARCGIS_ONLINE_GEOCODING_URL =\n  \"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/\";\n\n// nice to have: verify custom endpoints contain 'GeocodeServer' and end in a '/'\nexport interface IEndpointOptions extends IRequestOptions {\n  /**\n   * Any ArcGIS Geocoding service (example: http://sampleserver6.arcgisonline.com/arcgis/rest/services/Locators/SanDiego/GeocodeServer )\n   */\n  endpoint?: string;\n}\n\nexport interface IGetGeocodeServiceResponse {\n  currentVersion: number;\n  serviceDescription: string;\n  addressFields: any[];\n  countries: string[];\n  capabilities: string;\n}\n\n/**\n * Used to fetch metadata from a geocoding service.\n *\n * ```js\n * import { getGeocoderServiceInfo } from '@esri/arcgis-rest-geocoding';\n *\n * getGeocoderServiceInfo()\n *   .then((response) => {\n *     response.serviceDescription; // => 'World Geocoder'\n *   });\n * ```\n *\n * @param requestOptions - Request options can contain a custom geocoding service to fetch metadata from.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getGeocodeService(\n  requestOptions?: IEndpointOptions\n): Promise<IGetGeocodeServiceResponse> {\n  const url =\n    (requestOptions && requestOptions.endpoint) || ARCGIS_ONLINE_GEOCODING_URL;\n\n  const options: IEndpointOptions = {\n    httpMethod: \"GET\",\n    maxUrlLength: 2000,\n    ...requestOptions\n  };\n\n  return request(url, options);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { ISpatialReference, IPoint } from \"@esri/arcgis-rest-types\";\n\nimport { ARCGIS_ONLINE_GEOCODING_URL, IEndpointOptions } from \"./helpers\";\n\n// it'd be better if doc didnt display these properties in alphabetical order\nexport interface IAddressBulk {\n  /**\n   * A unique id must be passed along for each individual address.\n   */\n  OBJECTID: number;\n  address?: string;\n  address2?: string;\n  address3?: string;\n  neighborhood?: string;\n  city?: string;\n  subregion?: string;\n  /**\n   * The World Geocoding Service considers US states regions.\n   */\n  region?: string;\n  postal?: number;\n  postalExt?: number;\n  countryCode?: string;\n}\n\nexport interface IBulkGeocodeOptions extends IEndpointOptions {\n  addresses: IAddressBulk[];\n}\n\nexport interface IBulkGeocodeResponse {\n  spatialReference: ISpatialReference;\n  locations: Array<{\n    address: string;\n    location?: IPoint; // candidates with a score of 0 wont include a location\n    score: number;\n    attributes: object;\n  }>;\n}\n\n/**\n * ```js\n * import { bulkGeocode } from '@esri/arcgis-rest-geocoding';\n * import { ApplicationSession } from '@esri/arcgis-rest-auth';\n * //\n * const addresses = [\n *   { \"OBJECTID\": 1, \"SingleLine\": \"380 New York Street 92373\" },\n *   { \"OBJECTID\": 2, \"SingleLine\": \"1 World Way Los Angeles 90045\" }\n * ];\n * //\n * bulkGeocode({ addresses, authentication: session })\n *   .then((response) => {\n *     response.locations[0].location; // => { x: -117, y: 34, spatialReference: { wkid: 4326 } }\n *   });\n * ```\n * Used to geocode a [batch](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-geocode-addresses.htm) of addresses.\n *\n * @param requestOptions - Request options to pass to the geocoder, including an array of addresses and authentication session.\n * @returns A Promise that will resolve with the data from the response. The spatial reference will be added to address locations unless `rawResponse: true` was passed.\n */\nexport function bulkGeocode(\n  requestOptions: IBulkGeocodeOptions // must POST, which is the default\n): Promise<IBulkGeocodeResponse> {\n  const options: IBulkGeocodeOptions = {\n    endpoint: ARCGIS_ONLINE_GEOCODING_URL,\n    params: {},\n    ...requestOptions\n  };\n\n  options.params.addresses = {\n    records: requestOptions.addresses.map(address => {\n      return { attributes: address };\n    })\n  };\n\n  // the SAS service doesnt support anonymous requests\n  if (\n    !requestOptions.authentication &&\n    options.endpoint === ARCGIS_ONLINE_GEOCODING_URL\n  ) {\n    return Promise.reject(\n      \"bulk geocoding using the ArcGIS service requires authentication\"\n    );\n  }\n\n  return request(\n    `${cleanUrl(options.endpoint)}/geocodeAddresses`,\n    options\n  ).then(response => {\n    if (options.rawResponse) {\n      return response;\n    }\n    const sr = response.spatialReference;\n    response.locations.forEach(function(address: { location: IPoint }) {\n      if (address.location) {\n        address.location.spatialReference = sr;\n      }\n    });\n    return response;\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport { IExtent, ISpatialReference, IPoint } from \"@esri/arcgis-rest-types\";\n\nimport { ARCGIS_ONLINE_GEOCODING_URL, IEndpointOptions } from \"./helpers\";\n\nexport interface IGeocodeOptions extends IEndpointOptions {\n  /**\n   * use this if all your address info is contained in a single string.\n   */\n  singleLine?: string;\n  address?: string;\n  address2?: string;\n  address3?: string;\n  neighborhood?: string;\n  city?: string;\n  subregion?: string;\n  outFields?: \"*\" | string[];\n  /**\n   * The World Geocoding Service expects US states to be passed in as a 'region'.\n   */\n  region?: string;\n  postal?: number;\n  postalExt?: number;\n  countryCode?: string;\n  /**\n   * You can create an autocomplete experience by making a call to suggest with partial text and then passing through the magicKey and complete address that are returned to geocode.\n   * ```js\n   * import { suggest, geocode } from '@esri/arcgis-rest-geocoding';\n   * suggest(\"LAX\")\n   *   .then((response) => {\n   *     geocode({\n   *       singleLine: response.suggestions[1].text,\n   *       magicKey: response.suggestions[0].magicKey\n   *     })\n   *   })\n   * ```\n   */\n  magicKey?: string;\n}\n\nexport interface IGeocodeResponse {\n  spatialReference: ISpatialReference;\n  candidates: Array<{\n    address: string;\n    location: IPoint;\n    extent?: IExtent;\n    score: number;\n    attributes: object;\n  }>;\n}\n\n/**\n * ```js\n * import { geocode } from '@esri/arcgis-rest-geocoding';\n * //\n * geocode(\"LAX\")\n *   .then((response) => {\n *     response.candidates[0].location; // => { x: -118.409, y: 33.943, spatialReference: ...  }\n *   });\n * //\n * geocode({\n *   address: \"1600 Pennsylvania Ave\",\n *   postal: 20500,\n *   countryCode: \"USA\"\n * })\n *   .then((response) => {\n *     response.candidates[1].location; // => { x: -77.036533, y: 38.898719, spatialReference: ... }\n *   });\n * ```\n * Used to determine the location of a single address or point of interest. See the [REST Documentation](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-find-address-candidates.htm) for more information.\n * @param address String representing the address or point of interest or RequestOptions to pass to the endpoint.\n * @returns A Promise that will resolve with address candidates for the request. The spatial reference will be added to candidate locations and extents unless `rawResponse: true` was passed.\n */\nexport function geocode(\n  address: string | IGeocodeOptions\n): Promise<IGeocodeResponse> {\n  let options: IGeocodeOptions = {};\n  let endpoint: string;\n\n  if (typeof address === \"string\") {\n    options.params = { singleLine: address };\n    endpoint = ARCGIS_ONLINE_GEOCODING_URL;\n  } else {\n    endpoint = address.endpoint || ARCGIS_ONLINE_GEOCODING_URL;\n    options = appendCustomParams<IGeocodeOptions>(\n      address,\n      [\n        \"singleLine\",\n        \"address\",\n        \"address2\",\n        \"address3\",\n        \"neighborhood\",\n        \"city\",\n        \"subregion\",\n        \"region\",\n        \"postal\",\n        \"postalExt\",\n        \"countryCode\",\n        \"outFields\",\n        \"magicKey\"\n      ],\n      { params: { ...address.params } }\n    );\n  }\n\n  // add spatialReference property to individual matches\n  return request(`${cleanUrl(endpoint)}/findAddressCandidates`, options).then(\n    response => {\n      if (typeof address !== \"string\" && address.rawResponse) {\n        return response;\n      }\n      const sr = response.spatialReference;\n      response.candidates.forEach(function(candidate: {\n        location: IPoint;\n        extent?: IExtent;\n      }) {\n        candidate.location.spatialReference = sr;\n        if (candidate.extent) {\n          candidate.extent.spatialReference = sr;\n        }\n      });\n      return response;\n    }\n  );\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\n\nimport { IPoint, ILocation } from \"@esri/arcgis-rest-types\";\n\nimport { ARCGIS_ONLINE_GEOCODING_URL, IEndpointOptions } from \"./helpers\";\n\nexport interface IReverseGeocodeResponse {\n  address: {\n    [key: string]: any;\n  };\n  location: IPoint;\n}\n\nfunction isLocationArray(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is [number, number] | [number, number, number] {\n  return (\n    (coords as [number, number]).length === 2 ||\n    (coords as [number, number, number]).length === 3\n  );\n}\n\nfunction isLocation(\n  coords: ILocation | IPoint | [number, number] | [number, number, number]\n): coords is ILocation {\n  return (\n    (coords as ILocation).latitude !== undefined ||\n    (coords as ILocation).lat !== undefined\n  );\n}\n\n/**\n * ```js\n * import { reverseGeocode } from '@esri/arcgis-rest-geocoding';\n * //\n * reverseGeocode([-118.409,33.943 ]) // long, lat\n *   .then((response) => {\n *     response.address.PlaceName; // => \"LA Airport\"\n *   });\n * // or\n * reverseGeocode({ long: -118.409, lat: 33.943 })\n * reverseGeocode({ latitude: 33.943, latitude: -118.409 })\n * reverseGeocode({ x: -118.409, y: 33.9425 }) // wgs84 is assumed\n * reverseGeocode({ x: -13181226, y: 4021085, spatialReference: { wkid: 3857 })\n * ```\n * Used to determine the address of a [location](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-reverse-geocode.htm).\n *\n * @param coordinates - the location you'd like to associate an address with.\n * @param requestOptions - Additional options for the request including authentication.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function reverseGeocode(\n  coords: IPoint | ILocation | [number, number],\n  requestOptions?: IEndpointOptions\n): Promise<IReverseGeocodeResponse> {\n  const options: IEndpointOptions = {\n    endpoint: ARCGIS_ONLINE_GEOCODING_URL,\n    params: {},\n    ...requestOptions\n  };\n\n  if (isLocationArray(coords)) {\n    options.params.location = coords.join();\n  } else if (isLocation(coords)) {\n    if (coords.lat) {\n      options.params.location = coords.long + \",\" + coords.lat;\n    }\n    if (coords.latitude) {\n      options.params.location = coords.longitude + \",\" + coords.latitude;\n    }\n  } else {\n    // if input is a point, we can pass it straight through, with or without a spatial reference\n    options.params.location = coords;\n  }\n\n  return request(`${cleanUrl(options.endpoint)}/reverseGeocode`, options);\n}\n\nexport default {\n  reverseGeocode\n};\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\n\nimport { ARCGIS_ONLINE_GEOCODING_URL, IEndpointOptions } from \"./helpers\";\n\nexport interface ISuggestResponse {\n  suggestions: Array<{\n    text: string;\n    magicKey: string;\n    isCollection: boolean;\n  }>;\n}\n\n/**\n * ```js\n * import { suggest } from '@esri/arcgis-rest-geocoding';\n * //\n * suggest(\"Starb\")\n *   .then(response) // response.text === \"Starbucks\"\n * ```\n * Used to return a placename [suggestion](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-suggest.htm) for a partial string.\n *\n * @param requestOptions - Options for the request including authentication and other optional parameters.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function suggest(\n  partialText: string,\n  requestOptions?: IEndpointOptions\n): Promise<ISuggestResponse> {\n  const options: IEndpointOptions = {\n    endpoint: ARCGIS_ONLINE_GEOCODING_URL,\n    params: {},\n    ...requestOptions\n  };\n\n  options.params.text = partialText;\n\n  return request(`${cleanUrl(options.endpoint)}/suggest`, options);\n}\n\nexport default {\n  suggest\n};\n"],"names":["ARCGIS_ONLINE_GEOCODING_URL","requestOptions","options","endpoint","params","addresses","records","map","address","attributes","authentication","request","cleanUrl","then","response","rawResponse","sr","spatialReference","locations","forEach","location","Promise","reject","singleLine","appendCustomParams","candidates","candidate","extent","url","httpMethod","maxUrlLength","coords","length","isLocationArray","undefined","latitude","lat","isLocation","long","longitude","join","partialText","text"],"mappings":";;;;;wfAMaA,EACX,8HCyDAC,GAEA,IAAMC,KACJC,SAAUH,EACVI,OAAQ,IACLH,GAUL,OAPAC,EAAQE,OAAOC,UAAY,CACzBC,QAASL,EAAeI,UAAUE,IAAI,SAAAC,GACpC,MAAO,CAAEC,WAAYD,MAMtBP,EAAeS,gBAChBR,EAAQC,WAAaH,EAOhBW,UACFC,WAASV,EAAQC,8BACpBD,GACAW,KAAK,SAAAC,GACL,GAAIZ,EAAQa,YACV,OAAOD,EAET,IAAME,EAAKF,EAASG,iBAMpB,OALAH,EAASI,UAAUC,QAAQ,SAASX,GAC9BA,EAAQY,WACVZ,EAAQY,SAASH,iBAAmBD,KAGjCF,IAlBAO,QAAQC,OACb,uFCFJd,GAEA,IACIL,EADAD,EAA2B,GA8B/B,MA3BuB,iBAAZM,GACTN,EAAQE,OAAS,CAAEmB,WAAYf,GAC/BL,EAAWH,IAEXG,EAAWK,EAAQL,UAAYH,EAC/BE,EAAUsB,qBACRhB,EACA,CACE,aACA,UACA,WACA,WACA,eACA,OACA,YACA,SACA,SACA,YACA,cACA,YACA,YAEF,CAAEJ,YAAaI,EAAQJ,WAKpBO,UAAWC,WAAST,4BAAmCD,GAASW,KACrE,SAAAC,GACE,GAAuB,iBAAZN,GAAwBA,EAAQO,YACzC,OAAOD,EAET,IAAME,EAAKF,EAASG,iBAUpB,OATAH,EAASW,WAAWN,QAAQ,SAASO,GAInCA,EAAUN,SAASH,iBAAmBD,EAClCU,EAAUC,SACZD,EAAUC,OAAOV,iBAAmBD,KAGjCF,kCFxFXb,GAEA,IAAM2B,EACH3B,GAAkBA,EAAeE,UAAaH,EAE3CE,KACJ2B,WAAY,MACZC,aAAc,KACX7B,GAGL,OAAOU,UAAQiB,EAAK1B,8BGGpB6B,EACA9B,GAEA,IAAMC,KACJC,SAAUH,EACVI,OAAQ,IACLH,GAiBL,OA9DF,SACE8B,GAEA,OAC0C,IAAvCA,EAA4BC,QACmB,IAA/CD,EAAoCC,OA2CnCC,CAAgBF,IAvCtB,SACEA,GAEA,YACqCG,IAAlCH,EAAqBI,eACQD,IAA7BH,EAAqBK,IAoCbC,CAAWN,GASpB7B,EAAQE,OAAOgB,SAAWW,GARtBA,EAAOK,MACTlC,EAAQE,OAAOgB,SAAWW,EAAOO,KAAO,IAAMP,EAAOK,KAEnDL,EAAOI,WACTjC,EAAQE,OAAOgB,SAAWW,EAAOQ,UAAY,IAAMR,EAAOI,WAN5DjC,EAAQE,OAAOgB,SAAWW,EAAOS,OAa5B7B,UAAWC,WAASV,EAAQC,4BAA4BD,uBClD/DuC,EACAxC,GAEA,IAAMC,KACJC,SAAUH,EACVI,OAAQ,IACLH,GAKL,OAFAC,EAAQE,OAAOsC,KAAOD,EAEf9B,UAAWC,WAASV,EAAQC,qBAAqBD"}