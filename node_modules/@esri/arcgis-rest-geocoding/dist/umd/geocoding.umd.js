/* @preserve
* @esri/arcgis-rest-geocoding - v2.2.1 - Apache-2.0
* Copyright (c) 2017-2019 Esri, Inc.
* Mon Jul 22 2019 08:50:43 GMT-0600 (MDT)
*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@esri/arcgis-rest-request')) :
    typeof define === 'function' && define.amd ? define(['exports', '@esri/arcgis-rest-request'], factory) :
    (global = global || self, factory(global.arcgisRest = global.arcgisRest || {}, global.arcgisRest));
}(this, function (exports, arcgisRestRequest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /* Copyright (c) 2017 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    // https always
    var ARCGIS_ONLINE_GEOCODING_URL = "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/";
    /**
     * Used to fetch metadata from a geocoding service.
     *
     * ```js
     * import { getGeocoderServiceInfo } from '@esri/arcgis-rest-geocoding';
     *
     * getGeocoderServiceInfo()
     *   .then((response) => {
     *     response.serviceDescription; // => 'World Geocoder'
     *   });
     * ```
     *
     * @param requestOptions - Request options can contain a custom geocoding service to fetch metadata from.
     * @returns A Promise that will resolve with the data from the response.
     */
    function getGeocodeService(requestOptions) {
        var url = (requestOptions && requestOptions.endpoint) || ARCGIS_ONLINE_GEOCODING_URL;
        var options = __assign({ httpMethod: "GET", maxUrlLength: 2000 }, requestOptions);
        return arcgisRestRequest.request(url, options);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { geocode } from '@esri/arcgis-rest-geocoding';
     * //
     * geocode("LAX")
     *   .then((response) => {
     *     response.candidates[0].location; // => { x: -118.409, y: 33.943, spatialReference: ...  }
     *   });
     * //
     * geocode({
     *   address: "1600 Pennsylvania Ave",
     *   postal: 20500,
     *   countryCode: "USA"
     * })
     *   .then((response) => {
     *     response.candidates[1].location; // => { x: -77.036533, y: 38.898719, spatialReference: ... }
     *   });
     * ```
     * Used to determine the location of a single address or point of interest. See the [REST Documentation](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-find-address-candidates.htm) for more information.
     * @param address String representing the address or point of interest or RequestOptions to pass to the endpoint.
     * @returns A Promise that will resolve with address candidates for the request. The spatial reference will be added to candidate locations and extents unless `rawResponse: true` was passed.
     */
    function geocode(address) {
        var options = {};
        var endpoint;
        if (typeof address === "string") {
            options.params = { singleLine: address };
            endpoint = ARCGIS_ONLINE_GEOCODING_URL;
        }
        else {
            endpoint = address.endpoint || ARCGIS_ONLINE_GEOCODING_URL;
            options = arcgisRestRequest.appendCustomParams(address, [
                "singleLine",
                "address",
                "address2",
                "address3",
                "neighborhood",
                "city",
                "subregion",
                "region",
                "postal",
                "postalExt",
                "countryCode"
            ], { params: __assign({}, address.params) });
        }
        // add spatialReference property to individual matches
        return arcgisRestRequest.request(arcgisRestRequest.cleanUrl(endpoint) + "/findAddressCandidates", options).then(function (response) {
            if (typeof address !== "string" && address.rawResponse) {
                return response;
            }
            var sr = response.spatialReference;
            response.candidates.forEach(function (candidate) {
                candidate.location.spatialReference = sr;
                if (candidate.extent) {
                    candidate.extent.spatialReference = sr;
                }
            });
            return response;
        });
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { suggest } from '@esri/arcgis-rest-geocoding';
     * //
     * suggest("Starb")
     *   .then(response) // response.text === "Starbucks"
     * ```
     * Used to return a placename [suggestion](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-suggest.htm) for a partial string.
     *
     * @param requestOptions - Options for the request including authentication and other optional parameters.
     * @returns A Promise that will resolve with the data from the response.
     */
    function suggest(partialText, requestOptions) {
        var options = __assign({ endpoint: ARCGIS_ONLINE_GEOCODING_URL, params: {} }, requestOptions);
        options.params.text = partialText;
        return arcgisRestRequest.request(arcgisRestRequest.cleanUrl(options.endpoint) + "/suggest", options);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    function isLocationArray(coords) {
        return (coords.length === 2 ||
            coords.length === 3);
    }
    function isLocation(coords) {
        return (coords.latitude !== undefined ||
            coords.lat !== undefined);
    }
    /**
     * ```js
     * import { reverseGeocode } from '@esri/arcgis-rest-geocoding';
     * //
     * reverseGeocode([-118.409,33.943 ]) // long, lat
     *   .then((response) => {
     *     response.address.PlaceName; // => "LA Airport"
     *   });
     * // or
     * reverseGeocode({ long: -118.409, lat: 33.943 })
     * reverseGeocode({ latitude: 33.943, latitude: -118.409 })
     * reverseGeocode({ x: -118.409, y: 33.9425 }) // wgs84 is assumed
     * reverseGeocode({ x: -13181226, y: 4021085, spatialReference: { wkid: 3857 })
     * ```
     * Used to determine the address of a [location](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-reverse-geocode.htm).
     *
     * @param coordinates - the location you'd like to associate an address with.
     * @param requestOptions - Additional options for the request including authentication.
     * @returns A Promise that will resolve with the data from the response.
     */
    function reverseGeocode(coords, requestOptions) {
        var options = __assign({ endpoint: ARCGIS_ONLINE_GEOCODING_URL, params: {} }, requestOptions);
        if (isLocationArray(coords)) {
            options.params.location = coords.join();
        }
        else if (isLocation(coords)) {
            if (coords.lat) {
                options.params.location = coords.long + "," + coords.lat;
            }
            if (coords.latitude) {
                options.params.location = coords.longitude + "," + coords.latitude;
            }
        }
        else {
            // if input is a point, we can pass it straight through, with or without a spatial reference
            options.params.location = coords;
        }
        return arcgisRestRequest.request(arcgisRestRequest.cleanUrl(options.endpoint) + "/reverseGeocode", options);
    }

    /* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { bulkGeocode } from '@esri/arcgis-rest-geocoding';
     * import { ApplicationSession } from '@esri/arcgis-rest-auth';
     * //
     * const addresses = [
     *   { "OBJECTID": 1, "SingleLine": "380 New York Street 92373" },
     *   { "OBJECTID": 2, "SingleLine": "1 World Way Los Angeles 90045" }
     * ];
     * //
     * bulkGeocode({ addresses, authentication: session })
     *   .then((response) => {
     *     response.locations[0].location; // => { x: -117, y: 34, spatialReference: { wkid: 4326 } }
     *   });
     * ```
     * Used to geocode a [batch](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-geocode-addresses.htm) of addresses.
     *
     * @param requestOptions - Request options to pass to the geocoder, including an array of addresses and authentication session.
     * @returns A Promise that will resolve with the data from the response. The spatial reference will be added to address locations unless `rawResponse: true` was passed.
     */
    function bulkGeocode(requestOptions // must POST, which is the default
    ) {
        var options = __assign({ endpoint: ARCGIS_ONLINE_GEOCODING_URL, params: {
                forStorage: true,
                addresses: { records: [] }
            } }, requestOptions);
        requestOptions.addresses.forEach(function (address) {
            options.params.addresses.records.push({ attributes: address });
        });
        // the SAS service doesnt support anonymous requests
        if (!requestOptions.authentication &&
            options.endpoint === ARCGIS_ONLINE_GEOCODING_URL) {
            return Promise.reject("bulk geocoding using the ArcGIS service requires authentication");
        }
        return arcgisRestRequest.request(arcgisRestRequest.cleanUrl(options.endpoint) + "/geocodeAddresses", options).then(function (response) {
            if (options.rawResponse) {
                return response;
            }
            var sr = response.spatialReference;
            response.locations.forEach(function (address) {
                if (address.location) {
                    address.location.spatialReference = sr;
                }
            });
            return response;
        });
    }

    /* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */

    exports.ARCGIS_ONLINE_GEOCODING_URL = ARCGIS_ONLINE_GEOCODING_URL;
    exports.bulkGeocode = bulkGeocode;
    exports.geocode = geocode;
    exports.getGeocodeService = getGeocodeService;
    exports.reverseGeocode = reverseGeocode;
    exports.suggest = suggest;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=geocoding.umd.js.map
