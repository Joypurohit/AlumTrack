<% include partials/header %>
  <div class="container text-center">   
      <h1></h1>
    <div class="x">
            <img class="img" class="img-responsive" src="<%= alumni.image %>" width="300px" height="300px" style="border-radius: 50%;">
            </div>
            <% if(currentuser && currentuser.type =="alumni" && alumni._id != currentuser.id){ %>
                <% if(currentuser.sent.includes(alumni._id)){ %>
                    <p> Request sent</p>
                <% } else if(currentuser.recieved.includes(alumni._id)){ %>
                    <p>
                        <a href="/accept_request/<%= alumni.id %>" class="btn btn-primary">Accept Request</a>
                    </p>
                <% } else if(currentuser.accepted.includes(alumni._id)){ %>
                    <p>Friends</p>
                <% } else { %>
                    <p>
                        <a href="/send_request/<%= alumni.id %>" class="btn btn-primary">Send Request</a>
                    </p>
                <% }} %>
                <% if(currentuser && currentuser.type =="institute" && currentuser.recieved.includes(alumni._id)){ %>
                    <p>
                        <a href="/accept_request/<%= alumni.id %>" class="btn btn-primary">Accept Request</a>
                    </p>
                <% } %>
           <% if(currentuser && alumni._id.equals(currentuser._id)){%>
            <br>
            <div>
                <a id="button" class="btn btn-primary" href="/update_profile">Update Profile</a>
            </div><%}%>
            <br>
            <a class="btn btn-primary" href = "mailto: <%= alumni.email %>">Send Email</a>
            <h1><%= + alumni.fname + " " +alumni.lname %></h1>
            <br>
            <a class="btn btn-primary" href = "/viewblog/<%= alumni._id %>">View Blog</a>
            <br>
            <p style="font-weight: 800; font-size: 125%"><%= "Email: " + alumni.email %></p>
            
            <div class="address">
            <legend style="font-size: 125%;">Address</legend>
            
            <p style="font-size: 125%;"><%= alumni.address %></p>
            <div id="viewDiv">
                <iframe width="100%" height="450" frameborder="0" style="border:0" src="https://www.google.com/maps/embed/v1/place?q=<%= alumni.loc.y %>,<%= alumni.loc.x %>&amp;key=AIzaSyAPzLdcKEPCe4SQf3-cdSnq5vmh_MRaHCs"></iframe>
            </div>
        </div>
        
            <div style="padding: 1%;" class="description">
                <legend>About Dr <%= alumni.fname + " " +alumni.lname %></legend>
                <p id="description"><%= alumni.description %></p>
            </div>
            <div class="appreciation">
            <h3>Recommendations</h3>
            <% alumni.appreciations.forEach(function(appreciation){ %>
                <div class="inline-block"style="font-size: 125%;">
                    <strong><%= appreciation.author.username %></strong> - <%= appreciation.text %> 
                    <% if(currentuser && appreciation.author.id.equals(currentuser._id)){ %>
                        <form id="delete-form" action="/alumni/<%=appreciation._id %>/deleterecommendation" method="POST">
                            <input type="submit" class="btn btn-xs btn-danger" value="Delete">
                        </form>
                    <% } %>
                </div>
            <% }) %>
            <b>SKILLS</b>
            <% alumni.skills.forEach(function(skill){ %>
                <div><%= skill %></div>
            <% }) %>
            <% if(currentuser && currentuser.id == alumni._id) {%>
                <form autocomplete="off" action="/alumni/adduniversity" method="POST">
                    <div class="autocomplete">
                        <label>University Name</label>
                        <input id="myInput" type="text" name="university" placeholder="University">
                    </div>
                    <label>Graduation Year</label>
                    <input name="year" placeholder="Year">
                    <label>Branch</label>
                    <input name="branch" placeholder="Branch">
                    <div class="form-group">
                        <button id="btn" class="btn btn-primary ">Add University</button>
                    </div>
                </form>
                <br>
                <form autocomplete="off" action="/alumni/addskill" method="POST">
                    <label>Skill</label>
                    <input name="skill" placeholder="skill">
                    <div class="form-group">
                        <button id="btn" class="btn btn-primary ">Add Skill</button>
                    </div>
                </form>
                <br>
            <% } %>
            <% if(currentuser && currentuser.id != alumni._id) {%>
                <form action="/alumni/<%= alumni._id %>/newrecommendation" method="POST">
                    <div class="form-group">
                        <input style="font-size: 125%;" class="form-control s" type="text" name="text" placeholder="Add Recommendation">
                    </div>
                    <div class="form-group">
                        <button id="btn" class="btn btn-primary ">Add Recommendation</button>
                    </div>
                </form>
            <% } %>
            <h3>Institute</h3>
            <% alumni.institute.forEach(function(i){ %>
                <div><%= i.name %><%= i.verified %></div>
            <% }) %>
  </div>
  <br><br>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script>
      function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
              /*check if the item starts with the same letters as the text field value:*/
              if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function(e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
              }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
              /*If the arrow DOWN key is pressed,
              increase the currentFocus variable:*/
              currentFocus++;
              /*and and make the current item more visible:*/
              addActive(x);
            } else if (e.keyCode == 38) { //up
              /*If the arrow UP key is pressed,
              decrease the currentFocus variable:*/
              currentFocus--;
              /*and and make the current item more visible:*/
              addActive(x);
            } else if (e.keyCode == 13) {
              /*If the ENTER key is pressed, prevent the form from being submitted,*/
              e.preventDefault();
              if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
              }
            }
        });
        function addActive(x) {
          /*a function to classify an item as "active":*/
          if (!x) return false;
          /*start by removing the "active" class on all items:*/
          removeActive(x);
          if (currentFocus >= x.length) currentFocus = 0;
          if (currentFocus < 0) currentFocus = (x.length - 1);
          /*add class "autocomplete-active":*/
          x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
          /*a function to remove the "active" class from all autocomplete items:*/
          for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
          }
        }
        function closeAllLists(elmnt) {
          /*close all autocomplete lists in the document,
          except the one passed as an argument:*/
          var x = document.getElementsByClassName("autocomplete-items");
          for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
              x[i].parentNode.removeChild(x[i]);
            }
          }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
      }
      const getTodos = async () => {
          try {
              const res = await axios.get(`http://localhost:3000/get_universities`);
  
              const todos = res.data.universities;
  
              countries = todos.map(u => u.fname);
  
              autocomplete(document.getElementById("myInput"), countries);
          } catch (e) {
              console.error(e);
          }
      };
      /*An array containing all the country names in the world:*/
      getTodos();
      /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
      </script>
<% include partials/footer %>
